NUME: Vasilache Raluca
GRUPA: 324CA

				
					Etapa #2: Sistem energetic

	
	Proiectul contine:
	- folder-ul src al proiectului
	- un fisier README
	

	### Entitati

	Proiectul contine mai multe pachete care grupeaza clasele dupa 
functionalitatea lor:
	* entities : clasele necesare pentru simularea jocului
	* input : clasele folosite pentru parsarea datelor din format JSON
	* output : clasele folosite pentru scrierea datelor in format JSON
	* simulation : clasa care se ocupa de simularea mecanismului
	* utils : clasa Constants unde sunt declarate cateva constante
folosite in implementarea solutiei
	* data : clasa care se ocupa de crearea de baze de date cu o anume
functionalitate (populeaza o baza de date de Consumatori folosind o baza de
date de ConsumatoriOutput)
	* strategies : clasele folosita pentru design pattern-ul Stratey


	### Flow

	Citirea datelor se realizeaza folosind clasele specializate din pachetul
"input". Clasa InputLoader citeste datele si le incarca intr-un obiect de tipul
InputData. Acest obiect contine listele de consumatori, distribuitori si
producatori precum si parametrul "numberOfTurns". Cu ajutorul clasei DataManipulation,
pe baza datelor din listele din InputData se creeaza liste de obiecte de tipul
Consumer, Distributor si Producer (din pachetul "entities"), care, pe langa
informatiile citite din fisierul de intrare, contin si alte campuri utile
pentru realizarea simularii. 

	Pentru simularea mecanismului am creat clasa GameSimulator din pachetul
"simulation". Toate informatiile necesare pentru simularea jocului sunt in campurile
"numberOfTurns", "consumers", "distributors", "monthlyUpdates" si "producers". 


	Metoda "simulateOneTurn()" executa urmatorii pasi :
 
	- update() : aplica update-urile corespunzatoare rundei (din lista de
monthlyUpdate), mai exact adauga noi consumatori in lista de consumatori si
modifica costurile distribuitorilor

	- setProductionCosts() : pentru toti distribuitorii se apeleaza metoda
calculateProductionCost() din clasa Distributor care calculeaza si seteaza pretul
costului de productie pe baza formulelor din formulelor din enunt

	- setContractsPrices() : pentru toti distribuitorii se apeleaza metoda
setContractPrice() din clasa Distributor care calculeaza si seteaza pretul contractului
pe baza formulelor din enunt

	- removeContracts() : se elimina pentru toti distribuitorii acele contracte
care au numarul de luni ramase egal cu 0. Acest lucru implica resetarea unor campuri
pentru consumatorul caruia i-a expirat contractul, precum hasDistributor si
currentDistributor, astfel incat acesta sa-si poata alege alt contract.

	- chooseDistributor() : toti consumatorii care nu au dat faliment si nu au
distribuitor se vor abona la distribuitorul cu cel mai mic cost (se modifica campurile
"hasDistributor", "contractPrice" si "currentDistributor") 

	- updateConsumerBudget() : se parcurge lista de consumatori si se
apeleaza metoda "updateBudget" implementata in clasa Consumer. Aceasta realizeaza
plata facturilor si stabileste daca consumatorul ramane restant sau da faliment.
In momentul in care se platesc facturile, distribuitorul la care este abonat
primeste si el banii, intrucat clasa Consumer are doua campuri de tip Distributor
(unul pentru distribuitorul curent si altul pentru cel catre care are restanta)
si se poate apela metoda "collectMoney" din distributor ca sa colecteze plata.

	- updateDistributorBudget() : se parcurge lista de distribuitori si se
apeleaza metoda "updateBudget" implementata in clasa Distributor. Acesta
realizeaza plata cheltuielilor (calculate in metoda "getMonthlyExpenses()"),
iar daca nu le poate plati este setat campul isBankrupt ca fiind true.

	- applyProducerChanges() : daca este cazul, se modifica cantitatea de
energie pe care o poate oferi un producator, apeland metoda setEnergyPerDistributor().
Odata cu aceasta sunt notificati toti distribuitorii abonati la un producator care
a suferit o schimbare, astfel va fi setat ca true un flag (updateNeeded) care anunta ca
distribuitorul trebuie sa realeaga producatori

	- updateContractMonth() : pentru toate contractele se decrementeaza lunile ramase

	- removeConsumers() : se anuleaza toate contractele incheiate cu un consumator
care a dat faliment

	- removeDistributors() : se scot din joc distribuitorii care au dat faliment.
Acest lucru implica resetarea campurilor hasDistributor, currentDistributor si 
contractPrice pentru toti consumatorii unui distribuitor care va fi scos din joc.

	- changeProducer() : acei distribuitori care au flag-ul pentru update setat
si care nu sunt bankrupt vor fi scosi, pe rand, din listele de producatori
(nu uitam ca in momentul cand acesta este scos sa scadem numarul de distribuitori
curenti pe care ii are producatorul pentru ca altfel acesta va ajunge la capacitate
maxima mai devreme decat ar trebui!). Aplica apoi strategia de alegere si memoreaza
producatorii alesi (nu uitam sa resetam flag-ul pentru update).

	- makeMonthlyStats() : creeaza o "pagina" pentru statistica din luna curenta
si parcurge toti distribuitorii adaugand id-urile lor in statisticile producatorilor
la care sunt abonati

	- se incrementeaza luna curenta

	OBS: Daca este simulata runda initiala, flow-ul programului este diferit,
de aceea am realizat o alta metoda, simulateFirstTurn(). Modificarile sunt urmatoarele : 

	- la inceputul lunii se aleg producatorii initiali (chooseProducers())
	- NU se fac update-uri pentru nicio entitate
	- NU se realeg producatori
	- NU se realizeaza statistici pentru luna aceasta

	La finalul simularii lista de consumatori, cea de distribuitori si cea
de producatori vor contine informatiile care trebuie scrise in fisierul de
iesire. Pentru acest lucru se creeaza clasele din pachetul "output" care vor
contine doar campurile care trebuie scrise precum si clasa OutputLoade care
primeste path-ul catre fisierul de iesire si realizeaza scrierea, mapand un
obiect OutputData la un fisier JSON.
	
	OBS: Citirea si scrierea se realizeaza folosind biblioteca Jackson.

	### Design Patterns 

	1. Factory - folosit pentru creare de obiecte Consumer si Distributor,
aceste clase avand suficiciente elemente comune (ele extind clasa abstracta Entity)	
	2. Singletone - folosit pentru restrictionarea instantierii clasei 
EntityFactory (poate fi instantiata o singura data)
	3. Strategy - folosit pentru alegerea producatorilor urmand o strategie
specifica (metoda apply() din interfata comuna celor 3 strategii intoarce lista
de producatori alesi)
	4. Observer - folosit pentru simularea mecanismului de notificare a
distribuitorilor atunci cand producatorii lor au fost updatati. Astfel Producer
va extinde clasa Observable, iar Distributor va implementa interfata Observer

	### Elemente de design OOP
	
	- Incapsularea (cel mai bine evidentiata prin clasa GameSimulator) : realizata
prin setarea identificatorului de acces al tuturor metodelor ca "private", cu exceptia
metodei "simulateGame" care ruleaza metoda "simulateOneTurn" de un numar de ori egal cu
numarul de runde ale jocului, astfel obtinandu-se listele finale cu participantii

	### Limitari

	Ideal ar fi fost sa se creeze si obiecte de tipul Producer folosind Factory,
insa nu am gasit elemente comune intre aceasta entitate si celelalte doua.


Referinte:
Pentru scrierea fisierelor in format JSON: https://stackoverflow.com/questions/
7105745/how-to-specify-jackson-to-only-use-fields-preferably-globally

